#
# A two-line, Powerline-inspired theme that displays contextual information.
#
# This theme requires a patched Powerline font, get them from
# https://github.com/Lokaltog/powerline-fonts.
#
# Authors:
#   Isaac Wolkerstorfer <i@agnoster.net>
#   Jeff Sandberg <paradox460@gmail.com>
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#   Patrick Bos <egpbos@gmail.com>
#
# Screenshots:
#   http://i.imgur.com/0XIWX.png
#

# Load dependencies.
pmodload 'helper'

# Define variables.
_prompt_paradox_current_bg='NONE'
_prompt_paradox_segment_separator=''
_prompt_paradox_start_time=$SECONDS

function prompt_paradox_start_segment {
  local bg fg
  [[ -n "$1" ]] && bg="%K{$1}" || bg="%k"
  [[ -n "$2" ]] && fg="%F{$2}" || fg="%f"
  if [[ "$_prompt_paradox_current_bg" != 'NONE' && "$1" != "$_prompt_paradox_current_bg" ]]; then
    print -n " $bg%F{$_prompt_paradox_current_bg}$_prompt_paradox_segment_separator$fg "
  else
    print -n "$bg$fg "
  fi
  _prompt_paradox_current_bg="$1"
  [[ -n "$3" ]] && print -n "$3"
}

function prompt_paradox_end_segment {
  if [[ -n "$_prompt_paradox_current_bg" ]]; then
    print -n " %k%F{$_prompt_paradox_current_bg}$_prompt_paradox_segment_separator"
  else
    print -n "%k"
  fi
  print -n "%f"
  _prompt_paradox_current_bg=''
}

function prompt_paradox_build_prompt {
  prompt_paradox_start_segment none black '%(?::%F{red}✘ )%(!:%F{yellow}⚡ :)%(1j:%F{cyan}⚙ :)%f[%F{green} %D{%H:%M:%S}%f]'
  prompt_paradox_start_segment none black '%f[%F{blue}󰉋 $_prompt_paradox_pwd%f]'

  if [[ -n "$git_info" ]]; then
    prompt_paradox_start_segment none yellow '[${(e)git_info[ref]}%F{red}${(e)git_info[status]}%f]'
  fi

  if [[ -n "$python_info" ]]; then
    prompt_paradox_start_segment white black '${(e)python_info[virtualenv]}'
  fi

  # if [[ -n "$ruby_info" ]]; then
  #   prompt_paradox_start_segment none white '${(e)ruby_info[version]}'
  # fi
}

function preexec() {
  timer=$(($(gdate +%s%0N)/1000000))
}

function precmd() {
  if [ $timer ]; then
    now=$(($(gdate +%s%0N)/1000000))
    # elapsed=$(($now-$timer))
    local d_ms=$(($now-$timer))
    local d_s=$((d_ms / 1000))
    local ms=$((d_ms % 1000))
    local s=$((d_s % 60))
    local m=$(((d_s / 60) % 60))
    local h=$((d_s / 3600))
    if ((h > 0)); then elapsed=${h}h${m}m
    elif ((m > 0)); then elapsed=${m}m${s}s
    elif ((s >= 10)); then elapsed=${s}.$((ms / 100))s
    elif ((s > 0)); then elapsed=${s}.$((ms / 10))s
    else elapsed=${ms}ms
    fi

    export RPROMPT="%F{cyan}${elapsed} %{$reset_color%}"
    unset timer
  fi
}

function prompt_paradox_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  _prompt_paradox_pwd=$(prompt-pwd)

  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git-info
  fi

  # Get Python environment information.
  if (( $+functions[python-info] )); then
    python-info
  fi

  if (( $+functions[ruby-info] )); then
    ruby-info
  fi

  # Calculate and print the elapsed time.
  # prompt_paradox_print_elapsed_time
}

function prompt_paradox_preexec {
  _prompt_paradox_start_time="$SECONDS"
}

function prompt_paradox_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent sp subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook for calling git-info before each command.
  add-zsh-hook preexec prompt_paradox_preexec
  add-zsh-hook precmd prompt_paradox_precmd

  # Tell prezto we can manage this prompt
  zstyle ':prezto:module:prompt' managed 'yes'

  # Set editor-info parameters.
  zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format '%B%F{blue}❯%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '%F{red}♺%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format '%B%F{red}❮%f%b'

  # Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:action' format ' ⁝ %s'
  zstyle ':prezto:module:git:info:added' format ' ✚'
  zstyle ':prezto:module:git:info:ahead' format ' ⬆'
  zstyle ':prezto:module:git:info:behind' format ' ⬇'
  zstyle ':prezto:module:git:info:branch' format ' %b'
  zstyle ':prezto:module:git:info:commit' format '➦ %.7c'
  zstyle ':prezto:module:git:info:deleted' format ' ✖'
  zstyle ':prezto:module:git:info:dirty' format ' ⁝'
  zstyle ':prezto:module:git:info:modified' format ' ✱'
  zstyle ':prezto:module:git:info:position' format '%p'
  zstyle ':prezto:module:git:info:renamed' format ' ➙'
  zstyle ':prezto:module:git:info:stashed' format ' S'
  zstyle ':prezto:module:git:info:unmerged' format ' ═'
  zstyle ':prezto:module:git:info:untracked' format ' ?'
  zstyle ':prezto:module:git:info:keys' format \
    'ref' '$(coalesce "%b" "%p" "%c")' \
    'status' '%s%D%A%B%S%a%d%m%r%U%u'

  # %v - virtualenv name.
  zstyle ':prezto:module:python:info:virtualenv' format 'virtualenv:%v'

  # Set ruby-info parameters.
  zstyle ':prezto:module:ruby:info:version' format "%F{red} %v"

  # Define prompts.
  PROMPT='
${(e)$(prompt_paradox_build_prompt)}
 ${editor_info[keymap]} '
  RPROMPT=''
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_paradox_setup "$@"
# vim: ft=zsh
